services:
  postgres:
    deploy:
    environment:
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      POSTGRES_DB: "${POSTGRES_DB}"
    image: "postgres:17.1-bookworm"
    profiles: ["postgres"]
    restart: "${DOCKER_RESTART_POLICY:-unless-stopped}"
    stop_grace_period: "3s"
    volumes:
      - "./volumes/postgres:/var/lib/postgresql/data"

  redis:
    deploy:
    image: "redis:7.4.1-bookworm"
    profiles: ["redis"]
    restart: "${DOCKER_RESTART_POLICY:-unless-stopped}"
    stop_grace_period: "3s"
    volumes:
      - "./volumes/:/redis"

  web:
    build:
      context: "."
      target: "src"
    depends_on:
      postgres:
        condition: "service_started"
        required: false
      redis:
        condition: "service_started"
        required: false
    env_file:
      - ".env"
    restart: "${DOCKER_RESTART_POLICY:-unless-stopped}"
    stop_grace_period: "3s"
    tty: true
    deploy:
      resources:
        limits:
          cpus: "${DOCKER_WEB_CPUS:-0}"
          memory: "${DOCKER_WEB_MEMORY:-0}"
    healthcheck:
      test: "${DOCKER_WEB_HEALTHCHECK_TEST:-curl localhost:8000/up}"
      interval: "60s"
      timeout: "3s"
      start_period: "5s"
      retries: 3
    ports:
      - "${DOCKER_WEB_PORT_FORWARD:-127.0.0.1:8000}:${PORT:-8000}"
    profiles: ["web"]

volumes:
  postgres: {}
  redis: {}

  # volumes:
  #   - "${DOCKER_WEB_VOLUME:-./public_collected:/app/public_collected}"
